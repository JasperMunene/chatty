// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  name           String
  email          String     @unique
  password       String
  profilePicture String?    // Profile picture for the user
  chats          ChatUser[]
  messages       Message[]
  notifications  Notification[] // Relation to notifications
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Chat {
  id             String     @id @default(cuid())
  name           String?
  profilePicture String?    
  users          ChatUser[]
  messages       Message[]
  notifications  Notification[] // Relation to notifications
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model ChatUser {
  userId   String
  chatId   String
  isAdmin  Boolean   @default(false) // Indicates if the user is an admin in the chat
  user     User      @relation(fields: [userId], references: [id])
  chat     Chat      @relation(fields: [chatId], references: [id])

  @@id([userId, chatId]) // Composite primary key
}

model Message {
  id        String   @id @default(cuid())
  content   String
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  chatId     String? // Optional, since not all notifications may be tied to a chat
  type       String   // e.g., 'message', 'chat_invitation'
  content    String   // A description of the event, e.g., 'New message in chat X'
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id]) // Relation to User
  chat       Chat?    @relation(fields: [chatId], references: [id]) // Relation to Chat
}
